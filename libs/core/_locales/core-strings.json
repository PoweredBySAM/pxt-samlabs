{
  "Array._pickRandom|block": "get random value from %list",
  "Array._popStatement|block": "remove last value from %list",
  "Array._removeAtStatement|block": "%list| remove value at %index",
  "Array._shiftStatement|block": "remove first value from %list",
  "Array._unshiftStatement|block": "%list| insert %value| at beginning",
  "Array.indexOf|block": "%list| find index of %value",
  "Array.insertAt|block": "%list| insert at %index| value %value",
  "Array.length|block": "length of %VALUE",
  "Array.pop|block": "get and remove last value from %list",
  "Array.push|block": "%list| add value %value| to end",
  "Array.removeAt|block": "%list| get and remove value at %index",
  "Array.reverse|block": "reverse %list",
  "Array.shift|block": "get and remove first value from %list",
  "Array.unshift|block": "%list| insert %value| at beginning",
  "Array|block": "Array",
  "Buffer|block": "Buffer",
  "DCMotor.createMotor|block": "Create new motor",
  "DCMotor.setSamMotorColor|block": "set %variable color to %color",
  "DCMotor.setSamMotorSpeed|block": "set %variable motor speed to %value",
  "DCMotor.stopMotor|block": "stop motor %variable ",
  "Direction.Left|block": "left",
  "Direction.Right|block": "right",
  "HeatSensor.createHeatSensor|block": "Create new heat sensor",
  "HeatSensor.getSamHeatSensorColor|block": "get heat sensor %variable  color",
  "HeatSensor.getSamHeatSensorValueCelsius|block": "get heat %variable sensor value in Celsius",
  "HeatSensor.getSamHeatSensorValueFahrenheit|block": "get heat sensor  %variable value in Fahrenheit",
  "HeatSensor.heatSensorCelciusValueEquals|block": "value of heat sensor %variable equals %number celsius",
  "HeatSensor.heatSensorCelciusValueIsGreaterThan|block": "value of heat sensor %variable is greater than %number celsius",
  "HeatSensor.heatSensorCelciusValueIsLessThan|block": "value of heat sensor %variable is less than %number celsius",
  "HeatSensor.heatSensorfahrenHeitValueIsEqualTo|block": "value of heat sensor %variable equals %number fahrenheit",
  "HeatSensor.heatSensorfahrenHeitValueIsGreaterThan|block": "value of heat sensor %variable is greater than %number fahrenheit",
  "HeatSensor.heatSensorfahrenHeitValueIsLessThan|block": "value of heat sensor %variable is less than %number fahrenheit",
  "HeatSensor.setSamHeatSensorColor|block": "set heat sensor %variable  color to $value",
  "Hop.Astronomical|block": "to the moon!",
  "Hop.Incredible|block": "wow",
  "Hop.Long|block": "long",
  "Hop.Short|block": "short",
  "Hop.Silly|block": "silly",
  "LED.changeLEDBrightness|block": "change brightness of LED with ID $ledId to $brightness",
  "LED.createLED|block": "Create new LED",
  "LED.getLEDBrightness|block": "get brightness of LED $variable",
  "LED.getLEDColor|block": "get color of LED $variable",
  "LED.isLEDOn|block": "is LED $variable on",
  "LED.setLEDBodyColor|block": "set body color of LED %variable to $color",
  "LED.setLEDColor|block": "set color of LED $variable to $color",
  "LED.turnLEDOff|block": "turn LED $variable off",
  "LED.turnLEDOn|block": "turn LED $variable on",
  "LED|block": "LED",
  "LightSensor.createLightSensor|block": "Create new light sensor",
  "LightSensor.getSamLightSensorValue|block": "get %variable value ",
  "LightSensor.isSamLightSensorValueChanged|block": "is %variable value changed",
  "LightSensor.setSamLightSensorColor|block": "set color of light sensor %variable to $value",
  "LightSensor|block": "LightSensor",
  "Math.randomRange|block": "pick random %min|to %limit",
  "Math|block": "Math",
  "Microbit.clearLED|block": "clear %variable LEDs",
  "Microbit.createMicrobit|block": "Create new Microbit",
  "Microbit.getMicrobitAccelerometerValues|block": "get %variable $AccelerometerAxisOptions acceleration",
  "Microbit.getMicrobitAnalogPin|block": "get %variable V2 analog pin $pin value",
  "Microbit.getMicrobitDigitalPin|block": "get %variable V2 digital pin $pin value",
  "Microbit.getMicrobitTemperature|block": "get %variable temperature",
  "Microbit.isMicrobitButtonPressed|block": "is %variable button $buttonOption pressed",
  "Microbit.isMicrobitLedOn|block": "is %variable LED on X: $x Y: $y",
  "Microbit.isMicrobitPinPressed|block": "is %variable V2 $analogPinOption pressed",
  "Microbit.isMicrobitTemperatureChanged|block": "is %variable temperature changed",
  "Microbit.onMicrobitDisplayShape|block": "on %variable display $shape",
  "Microbit.onMicrobitDisplayWord|block": "on %variable display  $word",
  "Microbit.onMicrobitPlot|block": "on %variable plot X: $x Y: $y",
  "Microbit.onMicrobitToggle|block": "on %variable toggle X: $x Y: $y",
  "Microbit.onMicrobitUnPlot|block": "on %variable unplot X: $x Y: $y",
  "Microbit.shapeConversion|block": "$shapes",
  "Microbit.writeDigitalPin|block": "on %variable V2 write digital pin $pinId value $value",
  "Number|block": "Number",
  "Object|block": "Object",
  "PressureSensor.createPressureSensor|block": "Create new pressure sensor",
  "PressureSensor.getSamPressureSensorColor|block": "get pressure sensor %variable  color",
  "PressureSensor.getSamPressureSensorValue|block": "get pressure %variable sensor value",
  "PressureSensor.pressureSensorValueIsEqualTo|block": "value of pressure sensor %variable is equal to %number",
  "PressureSensor.pressureSensorValueIsGreaterThan|block": "value of pressure sensor %variable is greater than %number",
  "PressureSensor.pressureSensorValueIsLessThan|block": "value of pressure sensor %variable is less than %number",
  "PressureSensor.setSamPressureSensorColor|block": "set pressure sensor %variable  color to %value",
  "ProximitySensor.createProximitySensor|block": "Create new proximity sensor",
  "ProximitySensor.getSamProximitySensorColor|block": "get proximity sensor %variable  color",
  "ProximitySensor.getSamProximitySensorValue|block": "get proximity sensor %variable value",
  "ProximitySensor.sensorValueEquals|block": "proximity sensor %variable value equals %number",
  "ProximitySensor.sensorValueLessThan|block": "proximity sensor %variable value is less than %number",
  "ProximitySensor.sensorValueMoreThan|block": "proximity sensor %variable value is greater than %number",
  "ProximitySensor.setSamProximitySensorColor|block": "set proximity sensor %variable  color to %value",
  "ServoMotor.createServoMotor|block": "Create new servo motor",
  "ServoMotor.getServoMotorPosition|block": "get servo motor %variable position",
  "ServoMotor.setServoMotorColor|block": "set servo motor %variable color to %value",
  "ServoMotor.setServoMotorPosition|block": "set servo motor %variable position to %value degrees",
  "Slider.createSlider|block": "Create new slider",
  "Slider.getSamSliderValue|block": "get slider %variable value",
  "Slider.isSliderValueChanged|block": "is %variable value changed",
  "Slider.setSamSliderColor|block": "set slider %variable color to %value",
  "String.charAt|block": "char from %this=text|at %pos",
  "String.compare|block": "compare %this=text| to %that",
  "String.fromCharCode|block": "text from char code %code",
  "String.includes|block": "%this=text|includes %searchValue",
  "String.indexOf|block": "%this=text|find index of %searchValue",
  "String.isEmpty|block": "%this=text| is empty",
  "String.length|block": "length of %VALUE",
  "String.split|block": "split %this=text|at %separator",
  "String.substr|block": "substring of %this=text|from %start|of length %length",
  "String|block": "String",
  "TiltSensor.IsTiltTilted|block": "Is Tilt Sensor  %variable  tilted",
  "TiltSensor.IsTiltValueChanged|block": "Is Tilt Sensor %variable value changed",
  "TiltSensor.createTiltSensor|block": "Create new Tilt Sensor",
  "TiltSensor.setTiltColor|block": "Set Tilt Sensor %variable color to $color",
  "button.buttonIsPressed|block": "$variable is pressed",
  "button.createNewButton|block": "Create new button",
  "button.setButtonColor|block": "Set Button $variable color to %color",
  "buzzer.clearBuzzer|block": "clear Buzzer $variable",
  "buzzer.createBuzzer|block": "Create new Buzzer",
  "buzzer.setBuzzerColor|block": "Set Buzzer $variable color to $color",
  "buzzer.setBuzzerPitch|block": "Set Buzzer $variable pitch to $pitch Hz",
  "buzzer.setBuzzerVolume|block": "Set Buzzer $variable volume to $volume",
  "buzzer|block": "buzzer",
  "console|block": "console",
  "loops.pause|block": "pause (ms) %pause",
  "loops|block": "loops",
  "parseFloat|block": "parse to number %text",
  "parseInt|block": "parse to integer %text",
  "randint|block": "pick random %min|to %limit",
  "{id:category}Array": "Array",
  "{id:category}Arrays": "Arrays",
  "{id:category}Boolean": "Boolean",
  "{id:category}Buffer": "Buffer",
  "{id:category}Button": "Button",
  "{id:category}Buzzer": "Buzzer",
  "{id:category}Console": "Console",
  "{id:category}Control": "Control",
  "{id:category}DCMotor": "DCMotor",
  "{id:category}HeatSensor": "HeatSensor",
  "{id:category}Helpers": "Helpers",
  "{id:category}LED": "LED",
  "{id:category}LightSensor": "LightSensor",
  "{id:category}Loops": "Loops",
  "{id:category}Math": "Math",
  "{id:category}Microbit": "Microbit",
  "{id:category}Number": "Number",
  "{id:category}Object": "Object",
  "{id:category}PressureSensor": "PressureSensor",
  "{id:category}ProximitySensor": "ProximitySensor",
  "{id:category}ServoMotor": "ServoMotor",
  "{id:category}Slider": "Slider",
  "{id:category}Sprite": "Sprite",
  "{id:category}String": "String",
  "{id:category}Text": "Text",
  "{id:category}TiltSensor": "TiltSensor",
  "{id:group}Actions": "Actions",
  "{id:group}Modify": "Modify",
  "{id:group}Operations": "Operations",
  "{id:group}Read": "Read",
  "{id:group}Values": "Values"
}