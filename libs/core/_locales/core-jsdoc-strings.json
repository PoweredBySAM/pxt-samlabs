{
  "Array": "Add, remove, and replace items in lists.",
  "Array._pickRandom": "Return a random value from the array",
  "Array._popStatement": "Remove the last element from an array and return it.",
  "Array._removeAtStatement": "Remove the element at a certain index.",
  "Array._shiftStatement": "Remove the first element from an array and return it. This method changes the length of the array.",
  "Array._unshiftStatement": "Add one element to the beginning of an array and return the new length of the array.",
  "Array.concat": "Concatenates the values with another array.",
  "Array.concat|param|arr": "The other array that is being concatenated with",
  "Array.every": "Tests whether all elements in the array pass the test implemented by the provided function.",
  "Array.every|param|callbackfn": "A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.",
  "Array.fill": "Fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",
  "Array.filter": "Return the elements of an array that meet the condition specified in a callback function.",
  "Array.filter|param|callbackfn": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.",
  "Array.find": "Returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.",
  "Array.forEach": "Call a defined callback function on each element of an array.",
  "Array.forEach|param|callbackfn": "A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.",
  "Array.get": "Get the value at a particular index",
  "Array.get|param|index": "the zero-based position in the list of the item, eg: 0",
  "Array.indexOf": "Return the index of the first occurrence of a value in an array.",
  "Array.indexOf|param|fromIndex": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
  "Array.indexOf|param|item": "The value to locate in the array.",
  "Array.insertAt": "Insert the value at a particular index, increases length by 1",
  "Array.insertAt|param|index": "the zero-based position in the list to insert the value, eg: 0",
  "Array.isArray": "Check if a given object is an array.",
  "Array.join": "joins all elements of an array into a string and returns this string.",
  "Array.join|param|sep": "the string separator",
  "Array.length": "Get or set the length of an array. This number is one more than the index of the last element the array.",
  "Array.map": "Call a defined callback function on each element of an array, and return an array containing the results.",
  "Array.map|param|callbackfn": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.",
  "Array.pop": "Remove the last element from an array and return it.",
  "Array.push": "Append a new element to an array.",
  "Array.reduce": "Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
  "Array.reduce|param|callbackfn": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
  "Array.reduce|param|initialValue": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
  "Array.removeAt": "Remove the element at a certain index.",
  "Array.removeElement": "Remove the first occurence of an object. Returns true if removed.",
  "Array.reverse": "Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.",
  "Array.set": "Store a value at a particular index",
  "Array.set|param|index": "the zero-based position in the list to store the value, eg: 0",
  "Array.set|param|value": "the value to insert, eg: 0",
  "Array.shift": "Remove the first element from an array and return it. This method changes the length of the array.",
  "Array.slice": "Return a section of an array.",
  "Array.slice|param|end": "The end of the specified portion of the array. eg: 0",
  "Array.slice|param|start": "The beginning of the specified portion of the array. eg: 0",
  "Array.some": "Tests whether at least one element in the array passes the test implemented by the provided function.",
  "Array.some|param|callbackfn": "A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.",
  "Array.sort": "Sort the elements of an array in place and returns the array. The sort is not necessarily stable.",
  "Array.splice": "Remove elements from an array.",
  "Array.splice|param|deleteCount": "The number of elements to remove. eg: 0",
  "Array.splice|param|start": "The zero-based location in the array from which to start removing elements. eg: 0",
  "Array.unshift": "Add one element to the beginning of an array and return the new length of the array.",
  "Array@type": "Add, remove, and replace items in lists.",
  "Boolean.toString": "Returns a string representation of an object.",
  "DCMotor.getDCMotorSpeed": "Get the speed of the DC motor with the given ID",
  "DCMotor.getDCMotorSpeed|param|motorId": "The ID of the DC motor to get the speed of",
  "DCMotor.setDCMotorColor": "Set the color of the DC motor with the given ID",
  "DCMotor.setDCMotorColor|param|color": "The new color for the DC motor",
  "DCMotor.setDCMotorColor|param|motorId": "The ID of the DC motor to set the color for",
  "DCMotor.setDCMotorSpeed": "Set the speed of the DC motor with the given ID",
  "DCMotor.setDCMotorSpeed|param|motorId": "The ID of the DC motor to set the speed for",
  "DCMotor.setDCMotorSpeed|param|speed": "The new speed for the DC motor (-100 to 100)",
  "HeatSensor.getHeatSensorValueCelsius": "Get the value of the heat sensor with a given ID in Celsius",
  "HeatSensor.getHeatSensorValueCelsius|param|sensorId": "The ID of the heat sensor to get the value of",
  "HeatSensor.getHeatSensorValueFahrenheit": "Get the value of the heat sensor with a given ID in Fahrenheit",
  "HeatSensor.getHeatSensorValueFahrenheit|param|sensorId": "The ID of the heat sensor to get the value of",
  "HeatSensor.onHeatSensorValueChanges": "Register an event handler to run when the heat sensor value changes",
  "HeatSensor.onHeatSensorValueChanges|param|handler": "The function to run when the heat sensor value changes",
  "HeatSensor.onHeatSensorValueChanges|param|sensorId": "The ID of the heat sensor to listen for",
  "HeatSensor.setHeatSensorBorderColor": "Set the border color of the heat sensor",
  "HeatSensor.setHeatSensorBorderColor|param|color": "The new border color for the heat sensor",
  "HeatSensor.setHeatSensorBorderColor|param|sensorId": "The ID of the heat sensor to change the border color",
  "HeatSensor.waitUntilHeatSensorValueChanges": "Wait until the heat sensor value changes",
  "HeatSensor.waitUntilHeatSensorValueChanges|param|sensorId": "The ID of the heat sensor to wait for",
  "Infinity": "Constant representing positive infinity.",
  "LED.changeLEDBrightness": "Change the brightness of the LED with the given ID",
  "LED.changeLEDBrightness|param|brightness": "The new brightness for the LED (0 to 100)",
  "LED.changeLEDBrightness|param|ledId": "The ID of the LED to change the brightness for",
  "LED.changeLEDColor": "Change the color of the LED with the given ID",
  "LED.changeLEDColor|param|color": "The new color for the LED",
  "LED.changeLEDColor|param|ledId": "The ID of the LED to change the color for",
  "LED.getLEDBrightness": "Get the brightness of the LED with the given ID",
  "LED.getLEDBrightness|param|ledId": "The ID of the LED to get the brightness of",
  "LED.getLEDColor": "Get the color of the LED with the given ID",
  "LED.getLEDColor|param|ledId": "The ID of the LED to get the color of",
  "LED.isLEDOn": "Check if the LED with the given ID is on",
  "LED.isLEDOn|param|ledId": "The ID of the LED to check if it's on",
  "LED.setLEDBlockColor": "Set the border color of the LED with the given ID",
  "LED.setLEDBlockColor|param|borderColor": "The new border color for the LED",
  "LED.setLEDBlockColor|param|ledId": "The ID of the LED to set the border color for",
  "LED.setLEDColor": "Set the color of the LED with the given ID",
  "LED.setLEDColor|param|color": "The new color for the LED",
  "LED.setLEDColor|param|ledId": "The ID of the LED to set the color for",
  "LED.turnLEDOn": "Turn the LED with the given ID on",
  "LED.turnLEDOn|param|ledId": "The ID of the LED to turn on",
  "LED.whenLightSensorValueChanges": "When the light sensor value changes",
  "LightSensor.getLightSensorValue": "Get the current value of the light sensor",
  "LightSensor.onLightSensorValueChange": "Registers a handler that runs when the light sensor's value changes",
  "LightSensor.onLightSensorValueChange|param|handler": "The function to run when the light sensor's value changes",
  "LightSensor.setLightSensorBorderColor": "Set the border color of the light sensor",
  "LightSensor.setLightSensorBorderColor|param|color": "The new color for the light sensor border",
  "LightSensor.waitUntilLightSensorValueChanges": "Wait until the light sensor's value changes",
  "Math": "More complex operations with numbers.",
  "Math.abs": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
  "Math.abs|param|x": "A numeric expression for which the absolute value is needed.",
  "Math.acos": "Returns the arccosine (in radians) of a number",
  "Math.acos|param|x": "A number",
  "Math.asin": "Returns the arcsine (in radians) of a number",
  "Math.asin|param|x": "A number",
  "Math.atan": "Returns the arctangent (in radians) of a number",
  "Math.atan2": "Returns the arctangent of the quotient of its arguments.",
  "Math.atan2|param|x": "A number",
  "Math.atan2|param|y": "A number",
  "Math.atan|param|x": "A number",
  "Math.ceil": "Returns the smallest number greater than or equal to its numeric argument.",
  "Math.ceil|param|x": "A numeric expression.",
  "Math.cos": "Returns the cosine of a number.",
  "Math.cos|param|x": "An angle in radians",
  "Math.exp": "Returns returns ``e^x``.",
  "Math.exp|param|x": "A number",
  "Math.floor": "Returns the greatest number less than or equal to its numeric argument.",
  "Math.floor|param|x": "A numeric expression.",
  "Math.idiv": "Returns the value of integer signed 32 bit division of two numbers.",
  "Math.idiv|param|x": "The first number",
  "Math.idiv|param|y": "The second number",
  "Math.imul": "Returns the value of integer signed 32 bit multiplication of two numbers.",
  "Math.imul|param|x": "The first number",
  "Math.imul|param|y": "The second number",
  "Math.log": "Returns the natural logarithm (base e) of a number.",
  "Math.log|param|x": "A number",
  "Math.max": "Returns the larger of two supplied numeric expressions.",
  "Math.min": "Returns the smaller of two supplied numeric expressions.",
  "Math.pow": "Returns the value of a base expression taken to a specified power.",
  "Math.pow|param|x": "The base value of the expression.",
  "Math.pow|param|y": "The exponent value of the expression.",
  "Math.random": "Returns a pseudorandom number between 0 and 1.",
  "Math.randomRange": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
  "Math.randomRange|param|max": "the upper inclusive bound, eg: 10",
  "Math.randomRange|param|min": "the lower inclusive bound, eg: 0",
  "Math.round": "Returns a supplied numeric expression rounded to the nearest number.",
  "Math.roundWithPrecision": "Rounds ``x`` to a number with the given number of ``digits``",
  "Math.roundWithPrecision|param|digits": "the number of resulting digits",
  "Math.roundWithPrecision|param|x": "the number to round",
  "Math.round|param|x": "The value to be rounded to the nearest number.",
  "Math.sign": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
  "Math.sign|param|x": "The numeric expression to test",
  "Math.sin": "Returns the sine of a number.",
  "Math.sin|param|x": "An angle in radians",
  "Math.sqrt": "Returns the square root of a number.",
  "Math.sqrt|param|x": "A numeric expression.",
  "Math.tan": "Returns the tangent of a number.",
  "Math.tan|param|x": "An angle in radians",
  "Math.trunc": "Returns the number with the decimal part truncated.",
  "Math.trunc|param|x": "A numeric expression.",
  "NaN": "Constant representing Not-A-Number.",
  "Number.isNaN": "Check if a given value is of type Number and it is a NaN.",
  "Number.toString": "Returns a string representation of a number.",
  "Object.keys": "Return the field names in an object.",
  "PressureSensor.getPressureSensorValue": "Get the value of the pressure sensor with a given ID",
  "PressureSensor.getPressureSensorValue|param|sensorId": "The ID of the pressure sensor to get the value of",
  "PressureSensor.setPressureSensorBorderColor": "Set the border color of the pressure sensor",
  "PressureSensor.setPressureSensorBorderColor|param|color": "The new border color for the pressure sensor",
  "PressureSensor.setPressureSensorBorderColor|param|sensorId": "The ID of the pressure sensor to change border color",
  "PressureSensor.waitUntilPressureSensorValueChanges": "Wait until the pressure sensor value changes",
  "PressureSensor.waitUntilPressureSensorValueChanges|param|sensorId": "The ID of the pressure sensor to monitor",
  "PressureSensor.whenPressureSensorValueChanges": "Registers a handler that runs when the pressure sensor value changes",
  "PressureSensor.whenPressureSensorValueChanges|param|handler": "The function to run when the pressure sensor value changes",
  "PressureSensor.whenPressureSensorValueChanges|param|sensorId": "The ID of the pressure sensor to monitor",
  "ProximitySensor.getProximitySensorValue": "Get the value of the proximity sensor with a given ID",
  "ProximitySensor.getProximitySensorValue|param|sensorId": "The ID of the proximity sensor to get the value of",
  "ProximitySensor.setProximitySensorBorderColor": "Set the border color of the proximity sensor",
  "ProximitySensor.setProximitySensorBorderColor|param|color": "The new border color for the proximity sensor",
  "ProximitySensor.setProximitySensorBorderColor|param|sensorId": "The ID of the proximity sensor to change border color",
  "ProximitySensor.waitUntilProximitySensorValueChanges": "Wait until the proximity sensor value changes",
  "ProximitySensor.waitUntilProximitySensorValueChanges|param|sensorId": "The ID of the proximity sensor to monitor",
  "ProximitySensor.whenProximitySensorValueChanges": "Registers a handler that runs when the proximity sensor value changes",
  "ProximitySensor.whenProximitySensorValueChanges|param|handler": "The function to run when the proximity sensor value changes",
  "ProximitySensor.whenProximitySensorValueChanges|param|sensorId": "The ID of the proximity sensor to monitor",
  "ServoMotor.getServoMotorPosition": "Get the position of the servo motor with a given ID",
  "ServoMotor.getServoMotorPosition|param|motorId": "The ID of the servo motor to get the position of",
  "ServoMotor.setServoMotorBorderColor": "Set the border color of the servo motor",
  "ServoMotor.setServoMotorBorderColor|param|color": "The new border color for the servo motor",
  "ServoMotor.setServoMotorBorderColor|param|motorId": "The ID of the servo motor to change border color",
  "ServoMotor.setServoMotorPosition": "Set the position of the servo motor with a given ID",
  "ServoMotor.setServoMotorPosition|param|motorId": "The ID of the servo motor to set the position of",
  "ServoMotor.setServoMotorPosition|param|position": "The new position for the servo motor",
  "Slider.getSliderValue": "Get the value of the slider with a given ID",
  "Slider.getSliderValue|param|sliderId": "The ID of the slider to get the value of",
  "Slider.onSliderValueChanges": "Register an event handler to run when the slider value changes",
  "Slider.onSliderValueChanges|param|handler": "The function to run when the slider value changes",
  "Slider.onSliderValueChanges|param|sliderId": "The ID of the slider to listen for",
  "Slider.setSliderBorderColor": "Set the border color of the slider",
  "Slider.setSliderBorderColor|param|color": "The new border color for the slider",
  "Slider.setSliderBorderColor|param|sliderId": "The ID of the slider to change the border color",
  "Slider.waitUntilSliderValueChanges": "Wait until the slider value changes",
  "Slider.waitUntilSliderValueChanges|param|sliderId": "The ID of the slider to wait for",
  "Sprite": "A ghost on the screen.",
  "Sprite.forward": "Move the thing forward",
  "Sprite.x": "The X-coordiante",
  "Sprite.y": "The Y-coordiante",
  "String": "Combine, split, and search text strings.",
  "String.charAt": "Return the character at the specified index.",
  "String.charAt|param|index": "The zero-based index of the desired character.",
  "String.charCodeAt": "Return the Unicode value of the character at the specified location.",
  "String.charCodeAt|param|index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
  "String.compare": "See how the order of characters in two strings is different (in ASCII encoding).",
  "String.compare|param|that": "String to compare to target string",
  "String.concat": "Returns a string that contains the concatenation of two or more strings.",
  "String.concat|param|other": "The string to append to the end of the string.",
  "String.fromCharCode": "Make a string from the given ASCII character code.",
  "String.includes": "Determines whether a string contains the characters of a specified string.",
  "String.includes|param|searchValue": "the text to find",
  "String.includes|param|start": "optional start index for the search",
  "String.indexOf": "Returns the position of the first occurrence of a specified value in a string.",
  "String.indexOf|param|searchValue": "the text to find",
  "String.indexOf|param|start": "optional start index for the search",
  "String.isEmpty": "Returns a value indicating if the string is empty",
  "String.length": "Returns the length of a String object.",
  "String.replace": "Return the current string with the first occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string.",
  "String.replaceAll": "Return the current string with each occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string.",
  "String.replaceAll|param|replacer": "either the string that replaces toReplace in the current string,",
  "String.replaceAll|param|toReplace": "the substring to replace in the current string",
  "String.replace|param|replacer": "either the string that replaces toReplace in the current string,",
  "String.replace|param|toReplace": "the substring to replace in the current string",
  "String.slice": "Return a substring of the current string.",
  "String.slice|param|end": "one-past-last character index",
  "String.slice|param|start": "first character index; can be negative from counting from the end, eg:0",
  "String.split": "Splits the string according to the separators",
  "String.split|param|separator": "@param limit",
  "String.substr": "Return a substring of the current string.",
  "String.substr|param|length": "number of characters to extract, eg: 10",
  "String.substr|param|start": "first character index; can be negative from counting from the end, eg:0",
  "String.toLowerCase": "Converts the string to lower case characters.",
  "String.toUpperCase": "Converts the string to upper case characters.",
  "String.trim": "Return a substring of the current string with whitespace removed from both ends",
  "String@type": "Combine, split, and search text strings.",
  "StringMap": "A dictionary from string key to string values",
  "TiltSensor.isTiltSensorTilted": "Check if the tilt sensor with a given ID is tilted",
  "TiltSensor.isTiltSensorTilted|param|sensorId": "The ID of the tilt sensor to check",
  "TiltSensor.onTiltSensorTilted": "Register an event handler to run when the tilt sensor with the given ID is tilted",
  "TiltSensor.onTiltSensorTilted|param|handler": "The function to run when the tilt sensor is tilted",
  "TiltSensor.onTiltSensorTilted|param|sensorId": "The ID of the tilt sensor to listen for",
  "TiltSensor.setTiltSensorBorderColor": "Set the border color of the tilt sensor",
  "TiltSensor.setTiltSensorBorderColor|param|color": "The new border color for the tilt sensor",
  "TiltSensor.setTiltSensorBorderColor|param|sensorId": "The ID of the tilt sensor to change the border color",
  "TiltSensor.waitUntilTiltSensorTilted": "Wait until the tilt sensor with the given ID is tilted",
  "TiltSensor.waitUntilTiltSensorTilted|param|sensorId": "The ID of the tilt sensor to wait for",
  "button": "Control flow",
  "button.getButtonState": "Get the state of the button with a given ID",
  "button.getButtonState|param|buttonId": "The ID of the button to get the state of",
  "button.onButtonPressed": "Registers a handler that runs when the button with the given ID is pressed",
  "button.onButtonPressed|param|buttonId": "The ID of the button to listen for",
  "button.onButtonPressed|param|handler": "The function to run when the button is pressed",
  "button.setButtonColor": "Set the color of the button",
  "button.setButtonColor|param|buttonId": "The ID of the button to change color",
  "button.setButtonColor|param|color": "The new color for the button",
  "button.waitUntilButtonPressed": "Wait until the button with the given ID is pressed",
  "button.waitUntilButtonPressed|param|buttonId": "The ID of the button to wait for",
  "buzzer.clearBuzzer": "Clear the buzzer with the given ID by setting its volume and pitch to zero",
  "buzzer.clearBuzzer|param|buzzerId": "The ID of the buzzer to clear",
  "buzzer.setBuzzerColor": "Set the color of the buzzer with the given ID",
  "buzzer.setBuzzerColor|param|buzzerId": "The ID of the buzzer to set the color for",
  "buzzer.setBuzzerColor|param|color": "The new color for the buzzer",
  "buzzer.setBuzzerPitch": "Set the pitch of the buzzer with the given ID",
  "buzzer.setBuzzerPitch|param|buzzerId": "The ID of the buzzer to set the pitch for",
  "buzzer.setBuzzerPitch|param|pitch": "The new pitch for the buzzer (in Hz)",
  "buzzer.setBuzzerVolume": "Set the volume of the buzzer with the given ID",
  "buzzer.setBuzzerVolume|param|buzzerId": "The ID of the buzzer to set the volume for",
  "buzzer.setBuzzerVolume|param|volume": "The new volume for the buzzer (0-100)",
  "console.log": "Print out message",
  "hare.hop": "This is hop",
  "loops.forever": "Repeats the code forever in the background. On each iteration, allows other code to run.",
  "loops.forever|param|body": "the code to repeat",
  "loops.pause": "Pause for the specified time in milliseconds",
  "loops.pause|param|ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
  "parseFloat": "Convert a string to a number.",
  "parseInt": "Convert a string to an integer.\n\n\nIf this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\nAll other strings are considered decimal.",
  "parseInt|param|radix": "optional A value between 2 and 36 that specifies the base of the number in text.",
  "parseInt|param|text": "A string to convert into an integral number. eg: \"123\"",
  "randint": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
  "randint|param|max": "the upper inclusive bound, eg: 10",
  "randint|param|min": "the lower inclusive bound, eg: 0",
  "sprites.createSprite": "Creates a new sprite",
  "turtle": "Basic functionalities.",
  "turtle.forward": "Moves the sprite forward",
  "turtle.forward|param|steps": "number of steps to move, eg: 1",
  "turtle.onBump": "Triggers when the turtle bumps a wall",
  "turtle.turn": "Moves the sprite forward",
  "turtle.turn|param|angle": "degrees to turn, eg:90",
  "turtle.turn|param|direction": "the direction to turn, eg: Direction.Left"
}